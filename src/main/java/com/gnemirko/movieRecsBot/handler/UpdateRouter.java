package com.gnemirko.movieRecsBot.handler;

import com.gnemirko.movieRecsBot.service.RecommendationService;
import com.gnemirko.movieRecsBot.service.TaskManagerService;
import com.gnemirko.movieRecsBot.service.UserProfileService;
import com.gnemirko.movieRecsBot.util.CmdText;
import com.gnemirko.movieRecsBot.handler.StatusCommands;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ForceReplyKeyboard;

@Component
@RequiredArgsConstructor
public class UpdateRouter {

    private final ProfileCommandHandler profileHandler;
    private final RecommendationService recommendationService;
    private final UserProfileService userProfileService;
    private final MiniMenu miniMenu;
    private final MenuStateService stateService;
    private final TaskManagerService taskManagerService;
    private final StatusCommands statusCommands;

    public BotApiMethod<?> handle(Update update) {
        if (update == null) return null;

        if (update.hasCallbackQuery()) {
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            String data = String.valueOf(update.getCallbackQuery().getData());

            return switch (data) {
                case "menu:show" -> profileMessage(chatId);
                case "menu:add_genre" ->
                        prompt(chatId, "–í–≤–µ–¥–∏ –∂–∞–Ω—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.", MenuStateService.Await.ADD_GENRE);
                case "menu:add_actor" ->
                        prompt(chatId, "–í–≤–µ–¥–∏ –∞–∫—Ç—ë—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.", MenuStateService.Await.ADD_ACTOR);
                case "menu:add_director" ->
                        prompt(chatId, "–í–≤–µ–¥–∏ —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.", MenuStateService.Await.ADD_DIRECTOR);
                case "menu:add_block" ->
                        prompt(chatId, "–í–≤–µ–¥–∏ –∞–Ω—Ç–∏-–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.", MenuStateService.Await.ADD_BLOCK);
                case "menu:add_opinion" -> prompt(chatId,
                        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –º–Ω–µ–Ω–∏–µ ‚Äî –Ω–∞ –≤—Ç–æ—Ä–æ–π. –ü—Ä–∏–º–µ—Ä:\nInception\n–û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è.",
                        MenuStateService.Await.ADD_OPINION);
                case "menu:reset" -> {
                    userProfileService.reset(chatId);
                    stateService.clear(chatId);
                    yield SendMessage.builder()
                            .chatId(String.valueOf(chatId))
                            .text("–ü—Ä–æ—Ñ–∏–ª—å –æ—á–∏—â–µ–Ω\\.")
                            .parseMode("MarkdownV2")
                            .replyMarkup(miniMenu.mainMenu())
                            .disableWebPagePreview(true)
                            .build();
                }
                default -> SendMessage.builder()
                        .chatId(String.valueOf(chatId))
                        .text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\\.")
                        .parseMode("MarkdownV2")
                        .disableWebPagePreview(true)
                        .build();
            };
        }

        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String text = update.getMessage().getText().trim();

            var await = stateService.getAwait(chatId);
            if (await != MenuStateService.Await.NONE && !text.startsWith("/")) {
                switch (await) {
                    case ADD_GENRE -> {
                        userProfileService.addGenres(chatId, CmdText.parseArgs(text));
                        stateService.clear(chatId);
                        return profileMessage(chatId);
                    }
                    case ADD_ACTOR -> {
                        userProfileService.addActors(chatId, CmdText.parseArgs(text));
                        stateService.clear(chatId);
                        return profileMessage(chatId);
                    }
                    case ADD_DIRECTOR -> {
                        userProfileService.addDirectors(chatId, CmdText.parseArgs(text));
                        stateService.clear(chatId);
                        return profileMessage(chatId);
                    }
                    case ADD_BLOCK -> {
                        userProfileService.blockTags(chatId, CmdText.parseArgs(text));
                        stateService.clear(chatId);
                        return profileMessage(chatId);
                    }
                    case ADD_OPINION -> {
                        OpinionResult result = saveOpinion(chatId, text);
                        if (result.success()) {
                            stateService.clear(chatId);
                        }
                        return result.message();
                    }
                    default -> {
                    }
                }
            }

            if (text.startsWith("/")) {
                String command = text.split("\\s+", 2)[0].toLowerCase();

                if ("/menu".equals(command)) {
                    return SendMessage.builder()
                            .chatId(String.valueOf(chatId))
                            .text("–ß—Ç–æ –º–µ–Ω—è–µ–º? –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.")
                            .replyMarkup(miniMenu.mainMenu())
                            .disableWebPagePreview(true)
                            .build();
                }

                if ("/profile".equals(command)) {
                    return profileMessage(chatId);
                }

                if ("/help".equals(command)) {
                    return SendMessage.builder()
                            .chatId(String.valueOf(chatId))
                            .text(profileHandler.helpText())
                            .parseMode("MarkdownV2")
                            .disableWebPagePreview(true)
                            .build();
                }

                if ("/start".equals(command)) {
                    return SendMessage.builder()
                            .chatId(String.valueOf(chatId))
                            .text("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –∂–∞–Ω—Ä/–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help")
                            .disableWebPagePreview(true)
                            .build();
                }

                if ("/status".equals(command)) {
                    String arg = null;
                    if (text.length() > command.length()) {
                        arg = text.substring(command.length()).trim();
                        if (arg.isEmpty()) arg = null;
                    }
                    String ans = statusCommands.statusForChat(chatId, arg);
                    return SendMessage.builder()
                            .chatId(String.valueOf(chatId))
                            .text(ans)
                            .parseMode("MarkdownV2")
                            .disableWebPagePreview(true)
                            .build();
                }

                if ("/recommend".equals(command)) {
                    var task = taskManagerService.enqueue(chatId, null, "–¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏");
                    String displayId = task.getDisplayId();
                    return SendMessage.builder()
                            .chatId(String.valueOf(chatId))
                            .text("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç\\. –ó–∞–¥–∞—á–∞ ‚Ññ" + displayId + " –≤ –æ—á–µ—Ä–µ–¥–∏\\.\\n" +
                                    "–ù–∞–ø–∏—à–∏ `/status " + displayId + "` —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\\.")
                            .parseMode("MarkdownV2")
                            .replyMarkup(miniMenu.mainMenu())
                            .disableWebPagePreview(true)
                            .build();
                }

                if ("/watched".equals(command)) {
                    String payload = text.length() > command.length()
                            ? text.substring(command.length()).trim()
                            : "";
                    if (payload.isEmpty()) {
                    return prompt(chatId,
                            "–†–∞—Å—Å–∫–∞–∂–∏: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Ñ–∏–ª—å–º, –≤—Ç–æ—Ä–∞—è ‚Äî –º–Ω–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä:\nInception\n–û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è.",
                            MenuStateService.Await.ADD_OPINION);
                    }
                    OpinionResult result = saveOpinion(chatId, payload);
                    if (result.success()) {
                        stateService.clear(chatId);
                    }
                    return result.message();
                }

                if ("/like_genre".equals(command)) {
                    return prompt(chatId,
                            "–í–≤–µ–¥–∏ –∂–∞–Ω—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
                            MenuStateService.Await.ADD_GENRE);
                }

                if ("/like_actor".equals(command)) {
                    return prompt(chatId,
                            "–í–≤–µ–¥–∏ –∞–∫—Ç—ë—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
                            MenuStateService.Await.ADD_ACTOR);
                }

                if ("/like_director".equals(command)) {
                    return prompt(chatId,
                            "–í–≤–µ–¥–∏ —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
                            MenuStateService.Await.ADD_DIRECTOR);
                }

                if ("/block".equals(command)) {
                    return prompt(chatId,
                            "–í–≤–µ–¥–∏ –∞–Ω—Ç–∏-–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
                            MenuStateService.Await.ADD_BLOCK);
                }

                if ("/reset_profile".equals(command)) {
                    userProfileService.reset(chatId);
                    stateService.clear(chatId);
                    return SendMessage.builder()
                            .chatId(String.valueOf(chatId))
                            .text("–ü—Ä–æ—Ñ–∏–ª—å –æ—á–∏—â–µ–Ω\\.")
                            .parseMode("MarkdownV2")
                            .replyMarkup(miniMenu.mainMenu())
                            .disableWebPagePreview(true)
                            .build();
                }

                return SendMessage.builder()
                        .chatId(String.valueOf(chatId))
                        .text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\\. /help")
                        .parseMode("MarkdownV2")
                        .disableWebPagePreview(true)
                        .build();
            }

            var task = taskManagerService.enqueue(chatId, null, text);
            String displayId = task.getDisplayId();
            return SendMessage.builder()
                    .chatId(String.valueOf(chatId))
                    // uncomment this if you want to see the text about query in chat
//                    .text("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç\\. –ó–∞–¥–∞—á–∞ ‚Ññ" + displayId + " –≤ –æ—á–µ—Ä–µ–¥–∏\\.\n" +
//                            "–ù–∞–ø–∏—à–∏ `/status " + displayId + "` —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\\.")
//                    .parseMode("MarkdownV2")
//                    .replyMarkup(miniMenu.mainMenu())
                    .disableWebPagePreview(true)
                    .build();
        }

        return null;
    }

    private SendMessage prompt(long chatId, String text, MenuStateService.Await state) {
        stateService.setAwait(chatId, state);
        return SendMessage.builder()
                .chatId(String.valueOf(chatId))
                .text(text)
                .replyMarkup(ForceReplyKeyboard.builder().forceReply(true).build())
                .disableWebPagePreview(true)
                .build();
    }

    private SendMessage profileMessage(long chatId) {
        return SendMessage.builder()
                .chatId(String.valueOf(chatId))
                .text(profileHandler.profileText(chatId))
                .parseMode("MarkdownV2")
                .replyMarkup(miniMenu.mainMenu())
                .disableWebPagePreview(true)
                .build();
    }

    private OpinionResult saveOpinion(long chatId, String raw) {
        String trimmed = raw == null ? "" : raw.trim();
        if (trimmed.isEmpty()) {
            return new OpinionResult(prompt(chatId,
                    "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º –∏ –º–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –º–Ω–µ–Ω–∏–µ ‚Äî –≤—Ç–æ—Ä–∞—è.",
                    MenuStateService.Await.ADD_OPINION), false);
        }

        String title;
        String opinion;

        String[] byLine = trimmed.split("\\r?\\n", 2);
        if (byLine.length == 2) {
            title = byLine[0].trim();
            opinion = byLine[1].trim();
        } else {
            String[] semicolon = trimmed.split("\\s*;\\s*", 2);
            if (semicolon.length == 2) {
                title = semicolon[0].trim();
                opinion = semicolon[1].trim();
            } else {
                String[] dash = trimmed.split("\\s*[‚Äì‚Äî-]\\s*", 2);
                if (dash.length == 2) {
                    title = dash[0].trim();
                    opinion = dash[1].trim();
                } else {
                    title = trimmed;
                    opinion = "";
                }
            }
        }

        if (title.isEmpty()) {
            return new OpinionResult(prompt(chatId,
                    "–ù–µ –ø–æ–Ω—è–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞. –ù–∞–ø–∏—à–∏ –µ–≥–æ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –º–Ω–µ–Ω–∏–µ ‚Äî –Ω–∞ –≤—Ç–æ—Ä–æ–π.",
                    MenuStateService.Await.ADD_OPINION), false);
        }

        userProfileService.addMovieOpinion(chatId, title, opinion);
        String text = "–ó–∞–ø–∏—Å–∞–ª –º–Ω–µ–Ω–∏–µ –ø—Ä–æ *" + CmdText.esc(title) + "*.";
        if (!opinion.isEmpty()) {
            text += "\\n–°–ø–∞—Å–∏–±–æ, —É—á—Ç—É —ç—Ç–æ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö\\!";
        }
        return new OpinionResult(SendMessage.builder()
                .chatId(String.valueOf(chatId))
                .text(text)
                .parseMode("MarkdownV2")
                .replyMarkup(miniMenu.mainMenu())
                .disableWebPagePreview(true)
                .build(), true);
    }

    private record OpinionResult(SendMessage message, boolean success) {}
}
